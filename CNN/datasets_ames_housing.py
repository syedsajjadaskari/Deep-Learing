{"cells":[{"metadata":{},"id":"839b4ed8","cell_type":"markdown","source":"# The Ames housing dataset\n\nIn this notebook, we will quickly present the \"Ames housing\" dataset. We will\nsee that this dataset is similar to the \"California housing\" dataset.\nHowever, it is more complex to handle: it contains missing data and both\nnumerical and categorical features.\n\nThis dataset is located in the `datasets` directory. It is stored in a comma\nseparated value (CSV) file. As previously mentioned, we are aware that the\ndataset contains missing values. The character `\"?\"` is used as a missing\nvalue marker.\n\nWe will open the dataset and specify the missing value marker such that they\nwill be parsed by pandas when opening the file."},{"metadata":{"trusted":true},"id":"7906a4bb","cell_type":"code","source":"import pandas as pd\n\names_housing = pd.read_csv(\"../datasets/house_prices.csv\", na_values='?')\names_housing = ames_housing.drop(columns=\"Id\")","execution_count":null,"outputs":[]},{"metadata":{},"id":"a324e969","cell_type":"markdown","source":"We can have a first look at the available columns in this dataset."},{"metadata":{"trusted":true},"id":"5c42888f","cell_type":"code","source":"ames_housing.head()","execution_count":null,"outputs":[]},{"metadata":{},"id":"cf2e4077","cell_type":"markdown","source":"We see that the last column named `\"SalePrice\"` is indeed the target that we\nwould like to predict. So we will split our dataset into two variables\ncontaining the data and the target."},{"metadata":{"trusted":true},"id":"2bccaced","cell_type":"code","source":"target_name = \"SalePrice\"\ndata, target = ames_housing.drop(columns=target_name), ames_housing[target_name]","execution_count":null,"outputs":[]},{"metadata":{},"id":"acc2ae38","cell_type":"markdown","source":"Let's have a quick look at the target before to focus on the data."},{"metadata":{"trusted":true},"id":"3d06c60a","cell_type":"code","source":"target.head()","execution_count":null,"outputs":[]},{"metadata":{},"id":"b02f316e","cell_type":"markdown","source":"We see that the target contains continuous value. It corresponds to the price\nof a house in $. We can have a look at the target distribution."},{"metadata":{"trusted":true},"id":"1df5ede9","cell_type":"code","source":"import matplotlib.pyplot as plt\ntarget.plot.hist(bins=20, edgecolor=\"black\")\nplt.xlabel(\"House price in $\")\n_ = plt.title(\"Distribution of the house price \\nin Ames\")","execution_count":null,"outputs":[]},{"metadata":{},"id":"a890ae6b","cell_type":"markdown","source":"We see that the distribution has a long tail. It means that most of the house\nare normally distributed but a couple of houses have a higher than normal\nvalue. It could be critical to take this peculiarity into account when\ndesigning a predictive model.\n\nNow, we can have a look at the available data that we could use to predict\nhouse prices."},{"metadata":{"trusted":true},"id":"3cbd5b87","cell_type":"code","source":"data.info()","execution_count":null,"outputs":[]},{"metadata":{},"id":"1239becd","cell_type":"markdown","source":"Looking at the dataframe general information, we can see that 79 features are\navailable and that the dataset contains 1460 samples. However, some features\ncontains missing values. Also, the type of data is heterogeneous: both\nnumerical and categorical data are available.\n\nFirst, we will have a look at the data represented with numbers."},{"metadata":{"trusted":true},"id":"f3df3133","cell_type":"code","source":"numerical_data = data.select_dtypes(\"number\")\nnumerical_data.info()","execution_count":null,"outputs":[]},{"metadata":{},"id":"e74dff04","cell_type":"markdown","source":"We see that the data are mainly represented with integer number. Let's have\na look at the histogram for all these features."},{"metadata":{"trusted":true},"id":"55076906","cell_type":"code","source":"numerical_data.hist(bins=20, figsize=(12, 22), edgecolor=\"black\",\n                    layout=(9, 4))\nplt.subplots_adjust(hspace=0.8, wspace=0.8)","execution_count":null,"outputs":[]},{"metadata":{},"id":"75fadb29","cell_type":"markdown","source":"We see that some features have high picks for 0. It could be linked that this\nvalue was assigned when the criterion did not apply, for instance the\narea of the swimming pool when no swimming pools are available.\n\nWe also have some feature encoding some date (for instance year).\n\nThese information are useful and should also be considered when designing a\npredictive model.\n\nNow, let's have a look at the data encoded with strings."},{"metadata":{"trusted":true},"id":"a6bfff51","cell_type":"code","source":"string_data = data.select_dtypes(object)\nstring_data.info()","execution_count":null,"outputs":[]},{"metadata":{},"id":"ac65279c","cell_type":"markdown","source":"These features are categorical. We can make some bar plot to see categories\ncount for each feature."},{"metadata":{"trusted":true},"id":"ed784ef4","cell_type":"code","source":"from math import ceil\nfrom itertools import zip_longest\n\nn_string_features = string_data.shape[1]\nnrows, ncols = ceil(n_string_features / 4), 4\n\nfig, axs = plt.subplots(ncols=ncols, nrows=nrows, figsize=(14, 80))\n\nfor feature_name, ax in zip_longest(string_data, axs.ravel()):\n    if feature_name is None:\n        # do not show the axis\n        ax.axis(\"off\")\n        continue\n\n    string_data[feature_name].value_counts().plot.barh(ax=ax)\n    ax.set_title(feature_name)\n\nplt.subplots_adjust(hspace=0.2, wspace=0.8)","execution_count":null,"outputs":[]},{"metadata":{},"id":"53f8a737","cell_type":"markdown","source":"Plotting this information allows us to answer to two questions:\n\n* Is there few or many categories for a given features?\n* Is there rare categories for some features?\n\nKnowing about these peculiarities would help at designing the predictive\npipeline."},{"metadata":{},"id":"c377f9f7","cell_type":"markdown","source":"```{note}\nIn order to keep the content of the course simple and didactic, we\ncreated a version of this database without missing values.\n```"},{"metadata":{"trusted":true},"id":"f7a2d19a","cell_type":"code","source":"ames_housing_no_missing = pd.read_csv(\"../datasets/ames_housing_no_missing.csv\")\names_housing_no_missing.head()","execution_count":null,"outputs":[]},{"metadata":{},"id":"c1fdfc8e","cell_type":"markdown","source":"It contains the same information as the original dataset after using a\n[`sklearn.impute.SimpleImputer`](https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html)\nto replace missing values using the mean along each numerical column\n(including the target), and the most frequent value along each categorical column."},{"metadata":{"trusted":true},"id":"04eb2ef0","cell_type":"code","source":"from sklearn.compose import make_column_transformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\n\n\nnumerical_features = [\n    \"LotFrontage\",\n    \"LotArea\",\n    \"MasVnrArea\",\n    \"BsmtFinSF1\",\n    \"BsmtFinSF2\",\n    \"BsmtUnfSF\",\n    \"TotalBsmtSF\",\n    \"1stFlrSF\",\n    \"2ndFlrSF\",\n    \"LowQualFinSF\",\n    \"GrLivArea\",\n    \"BedroomAbvGr\",\n    \"KitchenAbvGr\",\n    \"TotRmsAbvGrd\",\n    \"Fireplaces\",\n    \"GarageCars\",\n    \"GarageArea\",\n    \"WoodDeckSF\",\n    \"OpenPorchSF\",\n    \"EnclosedPorch\",\n    \"3SsnPorch\",\n    \"ScreenPorch\",\n    \"PoolArea\",\n    \"MiscVal\",\n    target_name,\n]\ncategorical_features = data.columns.difference(numerical_features)\n\nmost_frequent_imputer = SimpleImputer(strategy=\"most_frequent\")\nmean_imputer = SimpleImputer(strategy=\"mean\")\n\npreprocessor = make_column_transformer(\n    (most_frequent_imputer, categorical_features),\n    (mean_imputer, numerical_features),\n)\names_housing_preprocessed = pd.DataFrame(\n    preprocessor.fit_transform(ames_housing),\n    columns=categorical_features.tolist() + numerical_features,\n)\names_housing_preprocessed = ames_housing_preprocessed[ames_housing.columns]\names_housing_preprocessed = ames_housing_preprocessed.astype(ames_housing.dtypes)\n(ames_housing_no_missing == ames_housing_preprocessed).all()","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"jupytext":{"main_language":"python","text_representation":{"extension":".py","format_name":"percent"}},"language_info":{"name":"python","version":"3.10.8","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":5}